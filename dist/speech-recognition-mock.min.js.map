{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 407b02ab303efc672baf","webpack:///./src/utils.ts","webpack:///./src/speech-recognition-mock.ts"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","speechRecognitionResultFn","index","isFinal","length","item","speechRecognitionAlternativeFn","confidence","transcript","speech_recognition_mock_SpeechRecognitionMock","SpeechRecognitionMock","listeners","addEventListener","onaudiostart","onsoundstart","onspeechstart","onspeechend","onsoundend","onresult","onnomatch","onerror","onstart","onend","type","listener","options","push","dispatchEvent","ev","_this","filter","callback","forEach","removeEventListener","start","started","DOMException","event","document","createEvent","initCustomEvent","stop","abort","say","sentence","resultIndex","results","0","oneSentence","interpretation","emma"],"mappings":"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","file":"speech-recognition-mock.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SpeechRecognitionMock\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SpeechRecognitionMock\"] = factory();\n\telse\n\t\troot[\"SpeechRecognitionMock\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 407b02ab303efc672baf","export function speechRecognitionResultFn(\n  index: number\n): SpeechRecognitionResult {\n  return {\n    isFinal: false,\n    length: 0,\n    item: speechRecognitionAlternativeFn\n  }\n}\nexport function speechRecognitionAlternativeFn(\n  index: number\n): SpeechRecognitionAlternative {\n  return {\n    confidence: 1,\n    transcript: ''\n  }\n}\n\nexport const oneSentence = (sentence: string, isFinal: boolean = false) => ({\n  length: 1,\n  item: speechRecognitionResultFn,\n  0: {\n    item: speechRecognitionAlternativeFn,\n    length: 1,\n    isFinal,\n    0: {\n      confidence: 0.9,\n      transcript: sentence\n    }\n  }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.ts","import { oneSentence } from './utils'\n\nexport interface SpeechRecognitionEventMap {\n  audiostart: Event\n  soundstart: Event\n  speechstart: Event\n  speechend: Event\n  soundend: Event\n  result: SpeechRecognitionEvent\n  nomatch: SpeechRecognitionEvent\n  error: SpeechRecognitionError\n  start: Event\n  end: Event\n}\n\nexport interface SpeechRecognitionEventMock\n  extends SpeechRecognitionEvent,\n    CustomEvent {}\n\nexport interface SpeechRecognitionStaticMock {\n  prototype: SpeechRecognitionMock\n  new (): SpeechRecognitionMock\n}\n\nexport interface ISpeechRecognitionMock extends SpeechRecognition {\n  say(sentence: string, isFinal: boolean, resultIndex: number): void\n}\nexport class SpeechRecognitionMock implements ISpeechRecognitionMock {\n  public grammars: SpeechGrammarList\n  public lang: string\n  public continuous: boolean\n  public interimResults: boolean\n  public maxAlternatives: number\n  public serviceURI: string\n\n  public onaudiostart: (ev: Event) => any\n  public onsoundstart: (ev: Event) => any\n  public onspeechstart: (ev: Event) => any\n  public onspeechend: (ev: Event) => any\n  public onsoundend: (ev: Event) => any\n  public onresult: (ev: SpeechRecognitionEvent) => any\n  public onnomatch: (ev: SpeechRecognitionEvent) => any\n  public onerror: (ev: SpeechRecognitionError) => any\n  public onstart: (ev: Event) => any\n  public onend: (ev: Event) => any\n\n  public started: boolean\n\n  private listeners: {\n    [key: string]: ((ev: Event) => any)[]\n  }\n\n  constructor() {\n    this.listeners = {}\n\n    this.addEventListener('audiostart', this.onaudiostart)\n    this.addEventListener('soundstart', this.onsoundstart)\n    this.addEventListener('speechstart', this.onspeechstart)\n    this.addEventListener('speechend', this.onspeechend)\n    this.addEventListener('soundend', this.onsoundend)\n    this.addEventListener('result', this.onresult)\n    this.addEventListener('nomatch', this.onnomatch)\n    this.addEventListener('error', this.onerror)\n    this.addEventListener('start', this.onstart)\n    this.addEventListener('end', this.onend)\n  }\n  addEventListener<K extends keyof SpeechRecognitionEventMap>(\n    type: K,\n    listener: (ev: SpeechRecognitionEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    this.listeners[type] = this.listeners[type] || []\n    this.listeners[type].push(listener)\n  }\n  dispatchEvent(ev: Event): boolean {\n    if (!(ev.type in this.listeners)) {\n      return true\n    }\n    this.listeners[ev.type]\n      .filter(callback => typeof callback === 'function')\n      .forEach(callback => {\n        callback.call(this, ev)\n      })\n    return true\n  }\n  removeEventListener<K extends keyof SpeechRecognitionEventMap>(\n    type: K,\n    listener?: (ev: SpeechRecognitionEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void {\n    if (!(type in this.listeners)) {\n      return\n    }\n    this.listeners[type] = this.listeners[type].filter(\n      callback => callback !== listener\n    )\n  }\n\n  start(): void {\n    if (this.started) {\n      throw new DOMException(\n        \"Failed to execute 'start' on 'SpeechRecognition': recognition has already started.\"\n      )\n    }\n    this.started = true\n    // Create and dispatch an event\n    const event = document.createEvent('CustomEvent')\n    event.initCustomEvent('start', false, false, null)\n    this.dispatchEvent(event)\n  }\n  stop(): void {\n    this.abort()\n  }\n  abort(): void {\n    if (!this.started) {\n      return\n    }\n    this.started = false\n    // Create and dispatch an event\n    const event = document.createEvent('CustomEvent')\n    event.initCustomEvent('end', false, false, null)\n    this.dispatchEvent(event)\n  }\n\n  say(sentence: string, isFinal: boolean, resultIndex: number = 0): void {\n    const results = oneSentence(sentence, isFinal)\n    // Create the event\n    const event = document.createEvent(\n      'CustomEvent'\n    ) as SpeechRecognitionEventMock\n    event.initCustomEvent('result', false, false, {})\n    event.resultIndex = resultIndex\n    event.results = results\n    event.interpretation = null\n    delete event.emma\n    this.dispatchEvent(event)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/speech-recognition-mock.ts"],"sourceRoot":""}