{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3229013cc6f9e95ffb24","webpack:///./src/utils.ts","webpack:///./src/speech-recognition-mock.ts"],"names":[],"mappings":"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","file":"speech-recognition-mock.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SpeechRecognitionMock\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SpeechRecognitionMock\"] = factory();\n\telse\n\t\troot[\"SpeechRecognitionMock\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3229013cc6f9e95ffb24","export function speechRecognitionResultFn(\n  index: number\n): SpeechRecognitionResult {\n  return {\n    isFinal: false,\n    length: 0,\n    item: speechRecognitionAlternativeFn\n  }\n}\nexport function speechRecognitionAlternativeFn(\n  index: number\n): SpeechRecognitionAlternative {\n  return {\n    confidence: 1,\n    transcript: ''\n  }\n}\n\nexport const oneSentence = (sentence: string, isFinal: boolean = false) => ({\n  length: 1,\n  item: speechRecognitionResultFn,\n  0: {\n    item: speechRecognitionAlternativeFn,\n    length: 1,\n    isFinal,\n    0: {\n      confidence: 0.9,\n      transcript: sentence\n    }\n  }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.ts","import { oneSentence } from './utils'\n\nexport interface SpeechRecognitionEventMap {\n  audiostart: Event\n  soundstart: Event\n  speechstart: Event\n  speechend: Event\n  soundend: Event\n  result: SpeechRecognitionEvent\n  nomatch: SpeechRecognitionEvent\n  error: SpeechRecognitionError\n  start: Event\n  end: Event\n}\n\nexport interface SpeechRecognitionEventMock\n  extends SpeechRecognitionEvent,\n    CustomEvent {}\n\nexport interface SpeechRecognitionStaticMock {\n  prototype: SpeechRecognitionMock\n  new (): SpeechRecognitionMock\n}\n\nexport interface ISpeechRecognitionMock extends SpeechRecognition {\n  say(sentence: string, isFinal: boolean, resultIndex: number): void\n}\nexport class SpeechRecognitionMock implements ISpeechRecognitionMock {\n  public grammars: SpeechGrammarList\n  public lang: string\n  public continuous: boolean\n  public interimResults: boolean\n  public maxAlternatives: number\n  public serviceURI: string\n\n  public onaudiostart: (ev: Event) => any\n  public onsoundstart: (ev: Event) => any\n  public onspeechstart: (ev: Event) => any\n  public onspeechend: (ev: Event) => any\n  public onsoundend: (ev: Event) => any\n  public onresult: (ev: SpeechRecognitionEvent) => any\n  public onnomatch: (ev: SpeechRecognitionEvent) => any\n  public onerror: (ev: SpeechRecognitionError) => any\n  public onstart: (ev: Event) => any\n  public onend: (ev: Event) => any\n\n  public started: boolean\n\n  private listeners: {\n    [key: string]: ((ev: Event) => any)[]\n  }\n\n  constructor() {\n    this.listeners = {}\n\n    this.addEventListener('audiostart', this.onaudiostart)\n    this.addEventListener('soundstart', this.onsoundstart)\n    this.addEventListener('speechstart', this.onspeechstart)\n    this.addEventListener('speechend', this.onspeechend)\n    this.addEventListener('soundend', this.onsoundend)\n    this.addEventListener('result', this.onresult)\n    this.addEventListener('nomatch', this.onnomatch)\n    this.addEventListener('error', this.onerror)\n    this.addEventListener('start', this.onstart)\n    this.addEventListener('end', this.onend)\n  }\n  addEventListener<K extends keyof SpeechRecognitionEventMap>(\n    type: K,\n    listener: (ev: SpeechRecognitionEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    this.listeners[type] = this.listeners[type] || []\n    this.listeners[type].push(listener)\n  }\n  dispatchEvent(ev: Event): boolean {\n    if (!(ev.type in this.listeners)) {\n      return true\n    }\n    this.listeners[ev.type]\n      .filter(callback => typeof callback === 'function')\n      .forEach(callback => {\n        callback.call(this, ev)\n      })\n    return true\n  }\n  removeEventListener<K extends keyof SpeechRecognitionEventMap>(\n    type: K,\n    listener?: (ev: SpeechRecognitionEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void {\n    if (!(type in this.listeners)) {\n      return\n    }\n    this.listeners[type] = this.listeners[type].filter(\n      callback => callback !== listener\n    )\n  }\n\n  start(): void {\n    if (this.started) {\n      throw new DOMException(\n        \"Failed to execute 'start' on 'SpeechRecognition': recognition has already started.\"\n      )\n    }\n    this.started = true\n    // Create and dispatch an event\n    const event = document.createEvent('CustomEvent')\n    event.initCustomEvent('start', false, false, null)\n    this.dispatchEvent(event)\n  }\n  stop(): void {\n    this.abort()\n  }\n  abort(): void {\n    if (!this.started) {\n      return\n    }\n    this.started = false\n    // Create and dispatch an event\n    const event = document.createEvent('CustomEvent')\n    event.initCustomEvent('end', false, false, null)\n    this.dispatchEvent(event)\n  }\n\n  say(sentence: string, isFinal: boolean, resultIndex: number = 0): void {\n    const results = oneSentence(sentence, isFinal)\n    // Create the event\n    const event = document.createEvent(\n      'CustomEvent'\n    ) as SpeechRecognitionEventMock\n    event.initCustomEvent('result', false, false, {})\n    event.resultIndex = resultIndex\n    event.results = results\n    event.interpretation = null\n    delete event.emma\n    this.dispatchEvent(event)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/speech-recognition-mock.ts"],"sourceRoot":""}